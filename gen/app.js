// Generated by CoffeeScript 1.6.1
(function() {
  var windowURL,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Array.prototype.first = function() {
    return this[0];
  };

  Array.prototype.last = function() {
    return this[this.length - 1];
  };

  Array.prototype.empty = function() {
    return this.length === 0;
  };

  windowURL = window.URL || window.webkitURL;

  ko.bindingHandlers.file = {
    init: function(element, valueAccessor) {
      return $(element).change(function() {
        var file;
        file = this.files[0];
        if (ko.isObservable(valueAccessor())) {
          return valueAccessor()(file);
        }
      });
    },
    update: function(element, valueAccessor, allBindingsAccessor) {
      var bindings, file, oldUrl, reader;
      file = ko.utils.unwrapObservable(valueAccessor());
      bindings = allBindingsAccessor();
      if (bindings.fileObjectURL && ko.isObservable(bindings.fileObjectURL)) {
        oldUrl = bindings.fileObjectURL();
        if (oldUrl) {
          windowURL.revokeObjectURL(oldUrl);
        }
        bindings.fileObjectURL(file && windowURL.createObjectURL(file));
      }
      if (bindings.fileBinaryData && ko.isObservable(bindings.fileBinaryData)) {
        if (!file) {
          return bindings.fileBinaryData(null);
        } else {
          reader = new FileReader();
          reader.onload = function(e) {
            return bindings.fileBinaryData(e.target.result);
          };
          return reader.readAsArrayBuffer(file);
        }
      }
    }
  };

  window.Floor = (function() {

    function _Class(number) {
      var _this = this;
      this.number = number != null ? number : 0;
      this.removeSelectedShape = function() {
        return _Class.prototype.removeSelectedShape.apply(_this, arguments);
      };
      this.attr = new Attr();
      this.currentShape = ko.observable();
      this.currentShop = ko.observable();
      this.shops = [];
      Events.on('shape.selected', function(e, args) {
        _this.currentShape(args.shape);
        return _this.currentShop(args.shape.shop);
      });
      Events.on('shape.removing', function(e, args) {
        if (args.shape === _this.currentShape()) {
          _this.currentShape(null);
          return _this.currentShop(null);
        }
      });
    }

    _Class.prototype.initCanvas = function() {
      this.jcanvas = $("#canvas" + this.number);
      this.jcanvas.height($(window).height() - 200);
      return this.jcanvas.width(this.jcanvas.parent().parent().width() - 2);
    };

    _Class.prototype.initEditor = function() {
      return this.editor = new VectorEditor(this.jcanvas.get(0), this.jcanvas.width(), this.jcanvas.height());
    };

    _Class.prototype.setTool = function(tool) {
      if (!this.editor) {
        this.initEditor();
      }
      this.editor.setTool(tool);
      return this.editor.setAttr(this.attr.build());
    };

    _Class.prototype.attrChanged = function() {
      if (this.editor) {
        this.editor.setAttr(this.attr.build());
      }
      if (this.currentShape()) {
        return this.currentShape().setAttr(this.attr.build());
      }
    };

    _Class.prototype.jsonData = function() {
      return {
        number: this.number,
        shapes: this.editor.jsonData()
      };
    };

    _Class.prototype.name = function() {
      return "Floor " + this.number;
    };

    _Class.prototype.href = function() {
      return "#floor" + this.number;
    };

    _Class.prototype.tabPaneId = function() {
      return "floor" + this.number;
    };

    _Class.prototype.canvasId = function() {
      return "canvas" + this.number;
    };

    _Class.prototype.deserialize = function(jsonData) {
      var raphaelShape, shape, shapeJson, _i, _len, _ref, _results;
      this.initCanvas();
      this.initEditor();
      _ref = jsonData.shapes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        shapeJson = _ref[_i];
        raphaelShape = this.editor.canvas.add([shapeJson.data])[0];
        shape = Shape.fromRaphaelShape(shapeJson.shape, this.editor.canvas, raphaelShape);
        _results.push(this.editor.shapes.push(shape));
      }
      return _results;
    };

    _Class.prototype.removeSelectedShape = function() {
      this.currentShape().finalize();
      return this.currentShape(null);
    };

    return _Class;

  })();

  window.Shop = (function() {

    function _Class() {
      this.name = ko.observable();
      this.url = ko.observable();
      this.logo = ko.observable(new Image());
      this.phone = ko.observable();
      this.categories = ko.observableArray();
      this.description = ko.observable();
      this.images = ko.observableArray();
    }

    return _Class;

  })();

  window.Category = (function() {

    function _Class() {}

    return _Class;

  })();

  window.Workspace = (function() {

    function _Class(name) {
      var _this = this;
      this.initCanvas = function() {
        return _Class.prototype.initCanvas.apply(_this, arguments);
      };
      this.removeShopImage = function(img) {
        return _Class.prototype.removeShopImage.apply(_this, arguments);
      };
      this.removeSelectedShape = function() {
        return _Class.prototype.removeSelectedShape.apply(_this, arguments);
      };
      this.activateFloor = function(floor) {
        return _Class.prototype.activateFloor.apply(_this, arguments);
      };
      this.removeFloor = function(floor) {
        return _Class.prototype.removeFloor.apply(_this, arguments);
      };
      this.addFloor = function() {
        return _Class.prototype.addFloor.apply(_this, arguments);
      };
      this.name = ko.observable(name);
      this.floors = ko.observableArray();
      this.currentFloor = ko.observable();
      this.hasFloors = ko.computed(function() {
        return _this.floors().length > 0;
      });
      this.selectToolClass = ko.computed(function() {
        return _this.toolCssClass(SelectTool);
      });
      this.rectangleToolClass = ko.computed(function() {
        return _this.toolCssClass(RectangleTool);
      });
      this.polygonToolClass = ko.computed(function() {
        return _this.toolCssClass(PolygonTool);
      });
      this.strokeColor = ko.computed({
        read: function() {
          var _ref;
          return (_ref = this.currentFloor()) != null ? _ref.attr.strokeColor : void 0;
        },
        write: function(value) {
          if (this.currentFloor()) {
            this.currentFloor().attr.strokeColor = value;
            return this.currentFloor().attrChanged();
          }
        },
        owner: this
      });
      this.strokeWidth = ko.computed({
        read: function() {
          var _ref;
          return (_ref = this.currentFloor()) != null ? _ref.attr.strokeWidth : void 0;
        },
        write: function(value) {
          if (this.currentFloor()) {
            this.currentFloor().attr.strokeWidth = value;
            return this.currentFloor().attrChanged();
          }
        },
        owner: this
      });
      this.strokeJoin = ko.computed({
        read: function() {
          var _ref;
          return (_ref = this.currentFloor()) != null ? _ref.attr.strokeJoin : void 0;
        },
        write: function(value) {
          if (this.currentFloor()) {
            this.currentFloor().attr.strokeJoin = value;
            return this.currentFloor().attrChanged();
          }
        },
        owner: this
      });
      this.fillColor = ko.computed({
        read: function() {
          var _ref;
          return (_ref = this.currentFloor()) != null ? _ref.attr.fillColor : void 0;
        },
        write: function(value) {
          if (this.currentFloor()) {
            this.currentFloor().attr.fillColor = value;
            return this.currentFloor().attrChanged();
          }
        },
        owner: this
      });
      this.currentShape = ko.computed(function() {
        var _ref;
        return (_ref = _this.currentFloor()) != null ? _ref.currentShape() : void 0;
      });
      this.currentShop = ko.computed(function() {
        var _ref;
        return (_ref = _this.currentFloor()) != null ? _ref.currentShop() : void 0;
      });
      this.canAddShop = ko.computed(function() {
        return _this.currentShape() && !_this.currentShop();
      });
      this.canRemoveShop = ko.computed(function() {
        return _this.currentShape() && _this.currentShop();
      });
      this.shopName = ko.computed(this.shopComputedProp('name'));
      this.shopUrl = ko.computed(this.shopComputedProp('url'));
      this.shopDescription = ko.computed(this.shopComputedProp('description'));
      this.shopName = ko.computed(this.shopComputedProp('name'));
      this.shopPhone = ko.computed(this.shopComputedProp('phone'));
      this.shopLogoImageFile = ko.computed({
        read: function() {
          var _ref;
          return (_ref = this.currentShop()) != null ? _ref.logo().imageFile() : void 0;
        },
        write: function(value) {
          if (this.currentShop()) {
            return this.currentShop().logo().imageFile(value);
          }
        },
        owner: this
      });
      this.shopLogoImageBinary = ko.computed({
        read: function() {
          var _ref;
          return (_ref = this.currentShop()) != null ? _ref.logo().imageBinary() : void 0;
        },
        write: function(value) {
          if (this.currentShop()) {
            return this.currentShop().logo().imageBinary(value);
          }
        },
        owner: this
      });
      this.shopLogoImageObjectURL = ko.computed({
        read: function() {
          var _ref;
          return (_ref = this.currentShop()) != null ? _ref.logo().imageObjectURL() : void 0;
        },
        write: function(value) {
          if (this.currentShop()) {
            return this.currentShop().logo().imageObjectURL(value);
          }
        },
        owner: this
      });
      this.shopImages = ko.computed({
        read: function() {
          var _ref;
          return (_ref = this.currentShop()) != null ? _ref.images() : void 0;
        },
        write: function(values) {
          if (this.currentShop()) {
            return this.currentShop().images(values);
          }
        },
        owner: this
      });
    }

    _Class.prototype.toolCssClass = function(toolConstructor) {
      var klass, _ref, _ref1;
      klass = "btn";
      if (((_ref = this.currentFloor()) != null ? (_ref1 = _ref.editor) != null ? _ref1.tool : void 0 : void 0) instanceof toolConstructor) {
        klass += " active";
      }
      return klass;
    };

    _Class.prototype.shopComputedProp = function(attr) {
      return {
        read: function() {
          var _ref;
          return (_ref = this.currentShop()) != null ? _ref[attr]() : void 0;
        },
        write: function(value) {
          if (this.currentShop()) {
            return this.currentShop()[attr](value);
          }
        },
        owner: this
      };
    };

    _Class.prototype.setSelectTool = function() {
      return this.currentFloor().setTool('select');
    };

    _Class.prototype.setRectangleTool = function() {
      return this.currentFloor().setTool('rectangle');
    };

    _Class.prototype.setPolygonTool = function() {
      return this.currentFloor().setTool('polygon');
    };

    _Class.prototype.addFloor = function() {
      var number;
      number = this.floors().length + 1;
      this.floors.push(new Floor(number));
      return this.activateLastFloor();
    };

    _Class.prototype.removeFloor = function(floor) {
      this.floors.remove(floor);
      return this.activateLastFloor();
    };

    _Class.prototype.activateFloor = function(floor) {
      return this.currentFloor(floor);
    };

    _Class.prototype.removeSelectedShape = function() {
      return this.currentFloor().removeSelectedShape();
    };

    _Class.prototype.activateLastFloor = function() {
      if (!this.floors().empty()) {
        this.currentFloor(this.floors().last());
        return $('#floor_tabs a:last').tab('show');
      }
    };

    _Class.prototype.addShopImage = function() {
      if (this.currentShop()) {
        this.currentShop().images.push(new Image());
        return Holder.run();
      }
    };

    _Class.prototype.removeShopImage = function(img) {
      if (this.currentShop()) {
        return this.currentShop().images.remove(img);
      }
    };

    _Class.prototype.initCanvas = function() {
      if (!this.deserializing) {
        return this.floors().last().initCanvas();
      }
    };

    _Class.prototype.addShop = function() {
      var shop;
      shop = new Shop();
      this.currentFloor().currentShape().shop = shop;
      return this.currentFloor().currentShop(shop);
    };

    _Class.prototype.removeShop = function() {
      this.currentFloor().currentShape().shop = null;
      return this.currentFloor().currentShop(null);
    };

    _Class.prototype.saveProject = function() {
      var data, floor, floors;
      floors = (function() {
        var _i, _len, _ref, _results;
        _ref = this.floors();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          floor = _ref[_i];
          _results.push(floor.jsonData());
        }
        return _results;
      }).call(this);
      data = {
        floors: floors
      };
      return $.ajax({
        url: '/projects',
        type: 'POST',
        data: {
          json: JSON.stringify(data)
        },
        success: function() {
          return alert('Проект сохранен успешно');
        }
      });
    };

    _Class.prototype.loadProject = function() {
      var _this = this;
      return $.ajax({
        url: '/projects',
        success: function(project) {
          return _this.deserializeProject(project);
        },
        error: function(xhr) {
          if (xhr.status === 404) {
            return alert('Проект не  найден');
          }
        }
      });
    };

    _Class.prototype.deserializeProject = function(projectJson) {
      var floor, floorJson, _i, _len, _ref;
      this.deserializing = true;
      _ref = projectJson.floors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        floorJson = _ref[_i];
        floor = new Floor(floorJson.number);
        this.floors.push(floor);
        floor.deserialize(floorJson);
      }
      this.activateLastFloor();
      return this.deserializing = false;
    };

    return _Class;

  })();

  window.Shop = (function() {

    function _Class() {
      this.name = ko.observable();
      this.url = ko.observable();
      this.logo = ko.observable(new Image());
      this.phone = ko.observable();
      this.categories = ko.observableArray();
      this.description = ko.observable();
      this.images = ko.observableArray();
    }

    return _Class;

  })();

  window.Image = (function() {

    function _Class() {
      this.imageFile = ko.observable();
      this.imageObjectURL = ko.observable();
      this.imageBinary = ko.observable();
    }

    return _Class;

  })();

  window.Events = {};

  Events.on = function(event, handler) {
    return jQuery(Events).on(event, handler);
  };

  Events.off = function(event) {
    return jQuery(Events).off(event);
  };

  Events.trigger = function(event, parameters) {
    return jQuery(Events).trigger(event, parameters);
  };

  window.Point = (function() {

    function _Class(x, y) {
      this.X = x;
      this.Y = y;
    }

    _Class.prototype.toString = function() {
      return "[" + this.X + ", " + this.Y + "]";
    };

    _Class.prototype.equals = function(other) {
      if (other == null) {
        return false;
      }
      if (!(other instanceof Point)) {
        return false;
      }
      return other.X === this.X && other.Y === this.Y;
    };

    return _Class;

  })();

  window.Shape = (function() {

    function _Class() {
      this.raphaelShape = null;
    }

    _Class.prototype.select = function() {
      if (!this.ft) {
        this.ft = this.canvas.freeTransform(this.raphaelShape, {
          rotate: false
        });
      }
      this.ft.showHandles();
      return this.selected = true;
    };

    _Class.prototype.deselect = function() {
      if (this.ft) {
        this.ft.hideHandles();
      }
      return this.selected = false;
    };

    _Class.prototype.finalize = function() {
      Events.trigger('shape.removing', {
        shape: this
      });
      this.ft.unplug();
      this.raphaelShape.remove();
      return Events.trigger('shape.removed', {
        shape: this
      });
    };

    _Class.prototype.x = function() {
      return this.raphaelShape.attr('x');
    };

    _Class.prototype.y = function() {
      return this.raphaelShape.attr('y');
    };

    _Class.prototype.w = function() {
      return this.raphaelShape.attr('width');
    };

    _Class.prototype.h = function() {
      return this.raphaelShape.attr('height');
    };

    _Class.prototype.setAttr = function(attr) {
      return this.raphaelShape.attr(attr);
    };

    _Class.fromRaphaelShape = function(type, canvas, raphaelShape) {
      var shape;
      if (type === 'rectangle') {
        shape = new Rectangle(canvas);
      } else if (type === 'polygon') {
        shape = new Polygon(canvas);
      }
      return shape["import"](raphaelShape);
    };

    return _Class;

  })();

  window.Rectangle = (function(_super) {

    __extends(_Class, _super);

    function _Class(canvas) {
      this.canvas = canvas;
      _Class.__super__.constructor.call(this);
    }

    _Class.prototype.startDrawing = function(p, attr) {
      this.raphaelShape = this.canvas.rect(p.X, p.Y, 0, 0).attr(attr);
      return this.bindEvents();
    };

    _Class.prototype["import"] = function(shape) {
      this.raphaelShape = shape;
      this.bindEvents();
      return this;
    };

    _Class.prototype.bindEvents = function() {
      var _this = this;
      return this.raphaelShape.click(function(e) {
        e.preventDefault();
        return Events.trigger('shape.click', {
          shape: _this
        });
      });
    };

    _Class.prototype.resize = function(p) {
      var h, w;
      w = p.X - this.x();
      h = p.Y - this.y();
      if (w > 0 && h > 0) {
        return this.raphaelShape.attr({
          width: w,
          height: h
        });
      }
    };

    _Class.prototype.jsonData = function() {
      var attr;
      attr = this.raphaelShape.attr();
      attr.type = 'rect';
      return {
        shape: 'rectangle',
        data: attr
      };
    };

    return _Class;

  })(Shape);

  window.Polygon = (function(_super) {

    __extends(_Class, _super);

    _Class.SnappingDistance = 10;

    function _Class(canvas) {
      this.canvas = canvas;
    }

    _Class.prototype.startDrawing = function(p, attr) {
      this.attr = attr;
      this.points = [p];
      return this.createPath(this.generatePathString());
    };

    _Class.prototype.stopDrawing = function(p) {
      var pathString,
        _this = this;
      pathString = this.generatePathString();
      this.createPath(pathString);
      Events.trigger('shape.drawn', {
        shape: this
      });
      return this.raphaelShape.click(function(e) {
        return Events.trigger('shape.click', {
          shape: _this
        });
      });
    };

    _Class.prototype["import"] = function(path) {
      this.raphaelShape = path;
      return this;
    };

    _Class.prototype.redraw = function(p) {
      if (this.points.length !== 1) {
        this.points.pop();
      }
      this.points.push(p);
      this.raphaelShape.remove();
      this.createPath(this.generatePathString());
      return this.tryClose(p);
    };

    _Class.prototype.addPoint = function(p) {
      return this.points.push(p);
    };

    _Class.prototype.tryClose = function(p) {
      if (this.points.length > 3 && this.pointsWithinSnappingRange(this.points.first(), this.points.last())) {
        this.raphaelShape.remove();
        return this.snapClose();
      }
    };

    _Class.prototype.pointsWithinSnappingRange = function(p1, p2) {
      return Math.abs(p1.X - p2.X) <= Polygon.SnappingDistance && Math.abs(p1.Y - p2.Y) <= Polygon.SnappingDistance;
    };

    _Class.prototype.snapClose = function() {
      var pathString,
        _this = this;
      this.points.pop();
      pathString = this.generatePathString() + "z";
      this.createPath(pathString);
      Events.trigger('shape.drawn', {
        shape: this
      });
      return this.raphaelShape.click(function(e) {
        return Events.trigger('shape.click', {
          shape: _this
        });
      });
    };

    _Class.prototype.createPath = function(pathString) {
      this.raphaelShape = this.canvas.path(pathString);
      this.raphaelShape.attr(this.attr);
      return this.raphaelShape;
    };

    _Class.prototype.generatePathString = function() {
      var reduceF;
      reduceF = function(acc, p, i) {
        var pathLetter;
        pathLetter = i === 0 ? 'M' : 'L';
        return "" + acc + pathLetter + p.X + "," + p.Y;
      };
      return this.points.reduce(reduceF, '');
    };

    _Class.prototype.jsonData = function() {
      var attr;
      attr = this.raphaelShape.attr();
      attr.type = 'path';
      return {
        shape: 'polygon',
        data: attr
      };
    };

    return _Class;

  })(Shape);

  window.Tool = (function() {

    function _Class() {}

    _Class.prototype.onMouseDown = function() {};

    _Class.prototype.onMouseUp = function() {};

    _Class.prototype.onMouseMove = function() {};

    _Class.prototype.onClick = function() {};

    _Class.prototype.onDoubleClick = function() {};

    _Class.createTool = function(canvas, id) {
      if (id == null) {
        id = 'select';
      }
      if (id === 'polygon') {
        return new PolygonTool(canvas);
      } else if (id === 'rectangle') {
        return new RectangleTool(canvas);
      } else if (id === 'select') {
        return new SelectTool(canvas);
      }
    };

    _Class.prototype.setAttr = function(attr) {
      this.attr = attr;
    };

    return _Class;

  })();

  window.Attr = (function() {

    function _Class(strokeColor, fillColor, strokeWidth, strokeJoin) {
      this.strokeColor = strokeColor != null ? strokeColor : '#000000';
      this.fillColor = fillColor != null ? fillColor : '#ff0000';
      this.strokeWidth = strokeWidth != null ? strokeWidth : 1;
      this.strokeJoin = strokeJoin != null ? strokeJoin : 'miter';
    }

    _Class.prototype.build = function() {
      return {
        'stroke': this.strokeColor,
        'stroke-width': this.strokeWidth,
        'stroke-linejoin': this.strokeJoin,
        'fill': this.fillColor
      };
    };

    return _Class;

  })();

  window.PolygonTool = (function(_super) {

    __extends(_Class, _super);

    function _Class(canvas, attr) {
      this.canvas = canvas;
      this.attr = attr;
    }

    _Class.prototype.onClick = function(p) {
      if (this.polygon) {
        return this.polygon.addPoint(p);
      } else {
        return this.startNewPolygon(p);
      }
    };

    _Class.prototype.onMouseMove = function(p) {
      if (this.resizing) {
        return this.polygon.resize(this.startResizeP, p);
      } else {
        if (this.polygon) {
          return this.polygon.redraw(p);
        }
      }
    };

    _Class.prototype.onDoubleClick = function(p) {
      if (this.polygon) {
        return this.polygon.stopDrawing(p);
      }
    };

    _Class.prototype.startNewPolygon = function(p) {
      var _this = this;
      this.polygon = new Polygon(this.canvas);
      this.polygon.startDrawing(p, this.attr);
      Events.trigger('shape.drawing', {
        p: p,
        shape: this.polygon
      });
      return Events.on('shape.drawn', function(e, args) {
        if (args.shape === _this.polygon) {
          return _this.polygon = null;
        }
      });
    };

    return _Class;

  })(Tool);

  window.SelectTool = (function(_super) {

    __extends(_Class, _super);

    function _Class(context) {
      var _this = this;
      _Class.__super__.constructor.call(this, context);
      Events.off('shape.click');
      Events.on('shape.click', function(e, args) {
        var shapeSelected;
        shapeSelected = args.shape.selected;
        if (shapeSelected) {
          Events.trigger('shape.deselecting', {
            shape: args.shape
          });
          args.shape.deselect();
          return Events.trigger('shape.deselected', {
            shape: args.shape
          });
        } else {
          Events.trigger('shape.selecting', {
            shape: args.shape
          });
          args.shape.select();
          return Events.trigger('shape.selected', {
            shape: args.shape
          });
        }
      });
    }

    _Class.prototype.onMouseDown = function(p) {};

    _Class.prototype.onMouseUp = function(p) {};

    _Class.prototype.onMouseMove = function(p) {};

    _Class.prototype.onClick = function(p) {};

    _Class.prototype.onKeyDown = function(e) {
      return console.log(e);
    };

    return _Class;

  })(Tool);

  window.RectangleTool = (function(_super) {

    __extends(_Class, _super);

    function _Class(canvas, attr) {
      this.canvas = canvas;
      this.attr = attr;
      this.bindEvents();
    }

    _Class.prototype.onMouseDown = function(p) {
      this.mouseDownP = p;
      this.rect = new Rectangle(this.canvas);
      this.rect.startDrawing(p, this.attr);
      this.bindEvents();
      return Events.trigger('shape.drawing', {
        p: p,
        shape: this.rect,
        tool: this
      });
    };

    _Class.prototype.onMouseUp = function(p) {
      if (p.equals(this.mouseDownP)) {
        this.deleteRect();
      } else {
        Events.trigger('shape.drawn', {
          p: p,
          shape: this.rect,
          tool: this
        });
      }
      return this.mouseDownP = null;
    };

    _Class.prototype.onMouseMove = function(p) {
      if (this.mouseDownP) {
        return this.rect.resize(p);
      }
    };

    _Class.prototype.bindEvents = function() {
      var _this = this;
      Events.on('shape.resizing', function(e, args) {
        _this.rect = args.shape;
        return _this.mouseDownP = args.p;
      });
      return Events.on('shape.resized', function(e, args) {
        return _this.mouseDownP = null;
      });
    };

    _Class.prototype.deleteRect = function() {
      Events.trigger('shape.removing', {
        shape: this.rect
      });
      this.rect.finalize();
      this.rect = null;
      return Events.trigger('shape.removed', {
        shape: null
      });
    };

    return _Class;

  })(Tool);

  window.VectorEditor = (function() {

    function _Class(el, width, height) {
      this.el = el;
      if (typeof Raphael === "undefined" || Raphael === null) {
        throw Error('RaphaelJS is not defined');
      }
      this.bindGlobalEvents();
      this.jel = $(this.el);
      this.canvas = Raphael(this.el, width, height);
      this.bindEvents();
      this.shapes = [];
      this.currentShape = null;
    }

    _Class.prototype.setTool = function(id) {
      return this.tool = Tool.createTool(this.canvas, id);
    };

    _Class.prototype.bindGlobalEvents = function() {
      var _this = this;
      Events.on('shape.drawing', function(e, args) {
        _this.shapes.push(args.shape);
        return _this.deselectAllShapes();
      });
      Events.on('shape.removing', function(e, args) {
        return _this.shapes.pop(args.shape);
      });
      return Events.on('shape.selecting', function(e, args) {
        return _this.deselectAllShapes();
      });
    };

    _Class.prototype.setAttr = function(attr) {
      this.attr = attr;
      return this.tool.setAttr(this.attr);
    };

    _Class.prototype.bindEvents = function() {
      var _this = this;
      this.jel.on('mousedown', function(e) {
        var point;
        point = new Point(e.offsetX, e.offsetY);
        return _this.onMouseDown(point, e.target);
      });
      this.jel.on('mouseup', function(e) {
        var point;
        point = new Point(e.offsetX, e.offsetY);
        return _this.onMouseUp(point, e.target);
      });
      this.jel.on('mousemove', function(e) {
        var point;
        point = new Point(e.offsetX, e.offsetY);
        return _this.onMouseMove(point, e.target);
      });
      this.jel.on('click', function(e) {
        var point;
        point = new Point(e.offsetX, e.offsetY);
        return _this.onClick(point, e.target);
      });
      return this.jel.on('dblclick', function(e) {
        var point;
        point = new Point(e.offsetX, e.offsetY);
        return _this.onDoubleClick(point, e.target);
      });
    };

    _Class.prototype.onMouseDown = function(p, target) {
      return typeof this !== "undefined" && this !== null ? this.tool.onMouseDown(p) : void 0;
    };

    _Class.prototype.onMouseUp = function(p, target) {
      return typeof this !== "undefined" && this !== null ? this.tool.onMouseUp(p) : void 0;
    };

    _Class.prototype.onMouseMove = function(p, target) {
      this.displayCoordinates(p);
      return typeof this !== "undefined" && this !== null ? this.tool.onMouseMove(p) : void 0;
    };

    _Class.prototype.onClick = function(p, target) {
      return typeof this !== "undefined" && this !== null ? this.tool.onClick(p) : void 0;
    };

    _Class.prototype.onDoubleClick = function(p, target) {
      return typeof this !== "undefined" && this !== null ? this.tool.onDoubleClick(p) : void 0;
    };

    _Class.prototype.deselectLastShape = function() {
      var _ref;
      return (_ref = this.shapes.last()) != null ? _ref.deselect() : void 0;
    };

    _Class.prototype.deselectAllShapes = function() {
      var shape, _i, _len, _ref, _results;
      _ref = this.shapes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        shape = _ref[_i];
        _results.push(shape.deselect());
      }
      return _results;
    };

    _Class.prototype.displayCoordinates = function(p) {
      $('#mouse_x').text('X: ' + p.X);
      return $('#mouse_y').text('  Y: ' + p.Y);
    };

    _Class.prototype.selectShape = function(shape) {
      this.currentShape = shape;
      return this.onShapeSelected(shape);
    };

    _Class.prototype.setStrokeColor = function(color) {
      this.strokeColor = color;
      if (this.currentShape) {
        return this.currentShape.attr({
          'stroke': color
        });
      }
    };

    _Class.prototype.setStrokeWidth = function(width) {
      this.strokeWidth = width;
      if (this.currentShape) {
        return this.currentShape.attr({
          'stroke-width': width
        });
      }
    };

    _Class.prototype.setStrokeLineJoin = function(value) {
      this.strokeLineJoin = value;
      if (this.currentShape) {
        return this.currentShape.attr({
          'stroke-linejoin': value
        });
      }
    };

    _Class.prototype.setFillColor = function(color) {
      this.fillColor = color;
      if (this.currentShape) {
        return this.currentShape.attr({
          'fill': color
        });
      }
    };

    _Class.prototype.jsonData = function() {
      var shape, _i, _len, _ref, _results;
      _ref = this.shapes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        shape = _ref[_i];
        _results.push(shape.jsonData());
      }
      return _results;
    };

    return _Class;

  })();

}).call(this);
